
type T = struct {
  bar: i32,
};

fn struct_alloc() void {
  // %0 = alloc T                          ; *T@ptr:0
  // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %2 = const 123                        ; 123 int
  // %3 = as i32 %2                        ; 123 i32
  // %4 = store %1 %3                      ; void
  const foo = T { bar = 123 };
}

fn struct_alloc_2() void {
  // %0 = alloc T                          ; *T@ptr:0
  // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %2 = const 123                        ; 123 int
  // %3 = as i32 %2                        ; 123 i32
  // %4 = store %1 %3                      ; void
  var foo = T { bar = 123 };

  // %5 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %6 = const 3                          ; 3 int
  // %7 = as i32 %6                        ; 3 i32
  // %8 = store %5 %7                    ; void
  foo.bar = 3;
}

fn struct_alloc_3() void {
  // %0 = alloc T                          ; *T@ptr:0
  // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %2 = const 123                        ; 123 int
  // %3 = as i32 %2                        ; 123 i32
  // %4 = store %1 %3                      ; void
  var foo = T { bar = 123 };

  // %5 = alloc T                          ; *T@ptr:4
  // %6 = memcpy %5 %0                     ; void
  const foo2 = foo;
}

fn struct_load() void {
  // %0 = alloc T                          ; *T@ptr:0
  // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %2 = const 123                        ; 123 int
  // %3 = as i32 %2                        ; 123 i32
  // %4 = store %1 %3                      ; void
  const foo = T { bar = 123 };

  // %5 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %6 = load %5                          ; 123 i32
  // %7 = alloc i32                        ; *i32@ptr:4
  // %8 = store %7 %6                      ; void
  const bar = foo.bar;
}

// const global_foo = T { bar = 123 };
// fn struct_from_global() void {
//   // %0 = alloc T                          ; *T@ptr:0
//   // %1 = memcpy %0 %global_foo            ; void
//   const bar = global_foo;
// }

fn int_alloc() void {
  // %0 = alloc i32                        ; *i32@ptr:0
  // %1 = const 10                         ; 10 int
  // %2 = as i32 %1                        ; 10 i32
  // %3 = store %0 %2                      ; void
  const foo: i32 = 10;
}

fn int_alloc_2() void {
  // %0 = alloc i32                        ; *i32@ptr:0
  // %1 = const 10                         ; 10 int
  // %2 = as i32 %1                        ; 10 i32
  // %3 = store %0 %2                      ; void
  var foo: i32 = 10;

  // %4 = const 123                        ; 123 int
  // %5 = as i32 %4                        ; 123 i32
  // %6 = store %0 %5                      ; void
  foo = 123;
}

fn int_load() void {
  // %0 = alloc i32                        ; *i32@ptr:0
  // %1 = const 10                         ; 10 int
  // %2 = as i32 %1                        ; 10 i32
  // %3 = store %0 %2                      ; void
  const foo: i32 = 10;

  // %4 = load i32 %0                      ; 10 i32
  // %5 = alloc i32                        ; *i32@ptr:4
  // %6 = store i32 %5 %4                  ; void
  const bar = foo;
}

fn array_alloc() void {
  // %0 = alloc [3]i32                        ; *[3]i32@ptr:0

  // %1 = const 0                             ; 0 int
  // %2 = as usize %1                         ; 0 usize
  // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0
  // %4 = const 1                             ; 1 int
  // %5 = as i32 %4                           ; 1 i32
  // %6 = store %3 %5                         ; void
 
  // %7 = const 1                             ; 1 int
  // %8 = as usize %7                         ; 1 usize
  // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4
  // %10 = const 2                            ; 2 int
  // %11 = as i32 %10                         ; 2 i32
  // %12 = store %9 %11                       ; void

  // %13 = const 2                            ; 2 int
  // %14 = as usize %13                       ; 2 usize
  // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8
  // %16 = const 3                            ; 3 int
  // %17 = as i32 %16                         ; 3 i32
  // %18 = store %15 %17                      ; void
  const foo: [3]i32 = [3]i32{1, 2, 3};
}

fn array_alloc_2() void {
  // %0 = alloc [3]i32                        ; *[3]i32@ptr:0

  // %1 = const 0                             ; 0 int
  // %2 = as usize %1                         ; 0 usize
  // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0
  // %4 = const 1                             ; 1 int
  // %5 = as i32 %4                           ; 1 i32
  // %6 = store %3 %5                         ; void
 
  // %7 = const 1                             ; 1 int
  // %8 = as usize %7                         ; 1 usize
  // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4
  // %10 = const 2                            ; 2 int
  // %11 = as i32 %10                         ; 2 i32
  // %12 = store %9 %11                       ; void

  // %13 = const 2                            ; 2 int
  // %14 = as usize %13                       ; 2 usize
  // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8
  // %16 = const 3                            ; 3 int
  // %17 = as i32 %16                         ; 3 i32
  // %18 = store %15 %17                      ; void
  var foo: [3]i32 = [3]i32{1, 2, 3};

  // %19 = const 0                            ; 0 int
  // %20 = as usize %19                       ; 0 usize
  // %21 = get_el_ptr %0 i=(%20) offset=(0)   ; *i32@ptr:0
  // %22 = const 4                            ; 4 int
  // %23 = as i32 %22                         ; 4 i32
  // %24 = store %21 %23                      ; void
  foo[0] = 4;
}

fn array_alloc_3() void {
  // %0 = alloc [3]i32                        ; *[3]i32@ptr:0

  // %1 = const 0                             ; 0 int
  // %2 = as usize %1                         ; 0 usize
  // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0
  // %4 = const 1                             ; 1 int
  // %5 = as i32 %4                           ; 1 i32
  // %6 = store %3 %5                         ; void
 
  // %7 = const 1                             ; 1 int
  // %8 = as usize %7                         ; 1 usize
  // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4
  // %10 = const 2                            ; 2 int
  // %11 = as i32 %10                         ; 2 i32
  // %12 = store %9 %11                       ; void

  // %13 = const 2                            ; 2 int
  // %14 = as usize %13                       ; 2 usize
  // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8
  // %16 = const 3                            ; 3 int
  // %17 = as i32 %16                         ; 3 i32
  // %18 = store %15 %17                      ; void
  const foo = [3]i32{1, 2, 3};

  const bar = foo;
}

// %mem.data.0: [5]bchar = "Hello"
fn str_alloc() void {
  // %0 = alloc [5]bchar                    ; [..5]bchar@ptr:0
  // %1 = memcpy %0 %mem.data.0             ; void
  const foo = "Hello";
}

fn str_alloc_2() void {
  // %0 = alloc [5]bchar                    ; [..5]bchar@ptr:0
  // %1 = memcpy %0 %mem.data.0             ; void
  comp { 
  var foo = "Hello";

  // %2 = usize.const 0                     ; 0 usize
  // %3 = get_el_ptr %0 i=(%2) offset=(0)   ; *bchar@ptr:0
  // %4 = bchar.const 'h'                   ; 'h' bchar
  // %5 = store %3 %4                       ; void
  const a = foo[0];
  foo[0] = 'h';
  const b = foo[0];
  }
  //  = 'h';
}
fn foo(a: i32) i32 {
  return a;
}

fn bar(a: i32) i32 {
  return rec(a);
}

fn rec(a: i32) i32 {
  if (a < 10) {
    return bar(2 * a);
    // return 2 * a;
  }
  return a;
}


fn sum_array() i32 {
    const arr :[4]i32 = [4]i32 {1, 2, 3, 4}
    var i: i32 = 0;
    var sum: i32 = 0;
    while (i < arr.len:as(i32)) {
        sum = sum + arr[i];
        i = i + 1;
    }
    return sum;
}


pub fn fib2() i32 {
 comp {
  var n: i32 = 10
 var a:i32 = 0
  var b:i32 = 1
  if (n > 0) {
    while (n > 1) {
      var t:i32 = a + b
      a = b
      b = t
      n = n - 1
    }
    return b
  }
  return a
 }
}

pub fn fib(n: i32) i32 {
 var a:i32 = 0
  var b:i32 = 1
  if (n > 0) {
    while (n > 1) {
      var t:i32 = a + b
      a = b
      b = t
      n = n - 1
    }
    return b
  }
  return a
}


fn explicit_casting() i32 {
  123.2:as(i32):as(u8):as(f32);
}

type K = struct {
  fn foo_add_child(a: i32, b: i32) i32 {
    return a + b;
  }
}

fn bar_add(a: i32, b: i32) i32 {
  return a + b;
}
  // fn foo_add(a: i32, b: i32) i32 {
  //   return a + b;
  // }
fn namespaced() void {
  const a = K.foo_add_child(1, 2);
}
fn global() void {
  const b = bar_add(1, 2);
}

fn builtin() void {
  const c = 2:as(i32);
}
// export fn main(n: i32) i32 {
//  var a:i32 = 0
//   var b:i32 = 1
//   if (n > 0) {
//     while (n > 1) {
//       var t:i32 = a + b
//       a = b
//       b = t
//       n = n - 1
//     }
//     return b
//   }
//   return a

// }

type R = struct {
  a: i8,
  b: i32,
}
export fn main() void {
   const foo: [2]i32 = [2]i32{1, 2};
   const bar: [3]i32 = [3]i32{3, 4, 5};
   const st = R{
    a = 1,
    b = 2,
   };
   const n:i32 = 2;
}
fn aaaa(a: i32) void {
//   @comptime_log(a);
}
// fn main() void {
//   comp foo(123);
//   comp foo(456);
// }

  fn foo_addd(a: i32, b: i32) i32 {
    return a + b;
  }
  fn foo_ad3d(a: i32, b: i32) i32 {
    return a + b;
  }

    fn fdsdss(a: i32, b: i32) i32 {
    return a + b;
  }
  fn f(a: i32, b: i32) i32 {
    return a + b;
  }

  var a: i32 = 1;

  fn foo_adddd() i32 {
    const c: i32 = comp 2;
    // return a + b;
  }

fn woop() i32 {
  return  2;
}


fn throws() @Result(i32) {
  // return !SomeError;

}
