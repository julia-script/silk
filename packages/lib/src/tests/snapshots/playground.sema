;; Sema
;; 36 declarations
;; 111 entities
;; 36 symbols
;; 832 instructions
;; 124 values
;; 70 types
;; 63 lists
;; 154 strings
;; 1048810/1347968 comptime memory used/allocated bytes

%0 = global @"T" todo_complex(global) 
%0: typeof(struct{i32}) = .block (2 insts)
 ├ %1: typeof(struct{i32}) = .type                                       ; typeof(struct{i32})
 └ %2: void = .br target=(%0) payload=(1)                                ; void

%1 = fn @"struct_alloc"() -> void
%0: typeof(void) = .block (10 insts)
 ├ %1: typeof(struct{i32}) = .global_get declaration=(%0)                ; typeof(struct{i32})
 ├ !%2: int = .constant                                                  ; int{ 123 }
 ├ !%3: void = .field_init field_name=(interned-lists.InternedLists(u8).Range{ .start = 503, .len = 3 }) value_inst=(%2); void
 ├ !%4: struct{i32} = .type_init field_init_list=({%3}) type=(struct{i32}); struct{i32}
 ├ !%5: type = .typeof operand=(%4)                                      ; type(struct{i32})
 ├ %6: *struct{i32} = .alloc type=(struct{i32}) mutable=(false)          ; *struct{i32}@ffff8
 ├ %7: i32 = .cast operand=(%2)                                          ; i32{ 123 }
 ├ %8: usize = .constant                                                 ; usize{ 0 }
 ├ %9: *i32 = .get_element_pointer base=(%6) index=(%8)                  ; *i32@ffff8
 └ %10: void = .store operand=(%9) payload=(%7)                          ; void

%2 = fn @"struct_alloc_2"() -> void
%0: typeof(void) = .block (15 insts)
 ├ %1: typeof(struct{i32}) = .global_get declaration=(%0)                ; typeof(struct{i32})
 ├ !%2: int = .constant                                                  ; int{ 123 }
 ├ !%3: void = .field_init field_name=(interned-lists.InternedLists(u8).Range{ .start = 503, .len = 3 }) value_inst=(%2); void
 ├ !%4: struct{i32} = .type_init field_init_list=({%3}) type=(struct{i32}); struct{i32}
 ├ !%5: type = .typeof operand=(%4)                                      ; type(struct{i32})
 ├ %6: *struct{i32} = .alloc type=(struct{i32}) mutable=(true)           ; *struct{i32}[runtime]
 ├ %7: i32 = .cast operand=(%2)                                          ; i32{ 123 }
 ├ %8: usize = .constant                                                 ; usize{ 0 }
 ├ %9: *i32 = .get_element_pointer base=(%6) index=(%8)                  ; *i32[runtime]
 ├ %10: void = .store operand=(%9) payload=(%7)                          ; void
 ├ %11: usize = .constant                                                ; usize{ 0 }
 ├ %12: *i32 = .get_element_pointer base=(%6) index=(%11)                ; *i32[runtime]
 ├ !%13: int = .constant                                                 ; int{ 3 }
 ├ %14: i32 = .cast operand=(%13)                                        ; i32{ 3 }
 └ %15: void = .store operand=(%12) payload=(%14)                        ; void

%3 = fn @"struct_alloc_3"() -> void
%0: typeof(void) = .block (14 insts)
 ├ %1: typeof(struct{i32}) = .global_get declaration=(%0)                ; typeof(struct{i32})
 ├ !%2: int = .constant                                                  ; int{ 123 }
 ├ !%3: void = .field_init field_name=(interned-lists.InternedLists(u8).Range{ .start = 503, .len = 3 }) value_inst=(%2); void
 ├ !%4: struct{i32} = .type_init field_init_list=({%3}) type=(struct{i32}); struct{i32}
 ├ !%5: type = .typeof operand=(%4)                                      ; type(struct{i32})
 ├ %6: *struct{i32} = .alloc type=(struct{i32}) mutable=(true)           ; *struct{i32}[runtime]
 ├ %7: i32 = .cast operand=(%2)                                          ; i32{ 123 }
 ├ %8: usize = .constant                                                 ; usize{ 0 }
 ├ %9: *i32 = .get_element_pointer base=(%6) index=(%8)                  ; *i32[runtime]
 ├ %10: void = .store operand=(%9) payload=(%7)                          ; void
 ├ !%11: struct{i32} = .load operand=(%6)                                ; struct{i32}
 ├ !%12: type = .typeof operand=(%11)                                    ; type(struct{i32})
 ├ %13: *struct{i32} = .alloc type=(struct{i32}) mutable=(false)         ; *struct{i32}[runtime]
 └ %14: void = .memcpy src=(%6) dest=(%13)                               ; void

%4 = fn @"struct_load"() -> void
%0: typeof(void) = .block (16 insts)
 ├ %1: typeof(struct{i32}) = .global_get declaration=(%0)                ; typeof(struct{i32})
 ├ !%2: int = .constant                                                  ; int{ 123 }
 ├ !%3: void = .field_init field_name=(interned-lists.InternedLists(u8).Range{ .start = 503, .len = 3 }) value_inst=(%2); void
 ├ !%4: struct{i32} = .type_init field_init_list=({%3}) type=(struct{i32}); struct{i32}
 ├ !%5: type = .typeof operand=(%4)                                      ; type(struct{i32})
 ├ %6: *struct{i32} = .alloc type=(struct{i32}) mutable=(false)          ; *struct{i32}@ffff0
 ├ %7: i32 = .cast operand=(%2)                                          ; i32{ 123 }
 ├ %8: usize = .constant                                                 ; usize{ 0 }
 ├ %9: *i32 = .get_element_pointer base=(%6) index=(%8)                  ; *i32@ffff0
 ├ %10: void = .store operand=(%9) payload=(%7)                          ; void
 ├ %11: usize = .constant                                                ; usize{ 0 }
 ├ %12: *i32 = .get_element_pointer base=(%6) index=(%11)                ; *i32@ffff0
 ├ %13: i32 = .load operand=(%12)                                        ; i32{ 123 }
 ├ !%14: type = .typeof operand=(%13)                                    ; type(i32)
 ├ %15: *i32 = .alloc type=(i32) mutable=(false)                         ; *i32@fffe8
 └ %16: void = .store operand=(%15) payload=(%13)                        ; void

%5 = fn @"int_alloc"() -> void
%0: typeof(void) = .block (5 insts)
 ├ !%1: int = .constant                                                  ; int{ 10 }
 ├ !%2: typeof(i32) = .type                                              ; typeof(i32)
 ├ %3: *i32 = .alloc type=(i32) mutable=(false)                          ; *i32@fffe0
 ├ %4: i32 = .cast operand=(%1)                                          ; i32{ 10 }
 └ %5: void = .store operand=(%3) payload=(%4)                           ; void

%6 = fn @"int_alloc_2"() -> void
%0: typeof(void) = .block (8 insts)
 ├ !%1: int = .constant                                                  ; int{ 10 }
 ├ !%2: typeof(i32) = .type                                              ; typeof(i32)
 ├ %3: *i32 = .alloc type=(i32) mutable=(true)                           ; *i32[runtime]
 ├ %4: i32 = .cast operand=(%1)                                          ; i32{ 10 }
 ├ %5: void = .store operand=(%3) payload=(%4)                           ; void
 ├ !%6: int = .constant                                                  ; int{ 123 }
 ├ %7: i32 = .cast operand=(%6)                                          ; i32{ 123 }
 └ %8: void = .store operand=(%3) payload=(%7)                           ; void

%7 = fn @"int_load"() -> void
%0: typeof(void) = .block (9 insts)
 ├ !%1: int = .constant                                                  ; int{ 10 }
 ├ !%2: typeof(i32) = .type                                              ; typeof(i32)
 ├ %3: *i32 = .alloc type=(i32) mutable=(false)                          ; *i32@fffd8
 ├ %4: i32 = .cast operand=(%1)                                          ; i32{ 10 }
 ├ %5: void = .store operand=(%3) payload=(%4)                           ; void
 ├ %6: i32 = .load operand=(%3)                                          ; i32{ 10 }
 ├ !%7: type = .typeof operand=(%6)                                      ; type(i32)
 ├ %8: *i32 = .alloc type=(i32) mutable=(false)                          ; *i32@fffd0
 └ %9: void = .store operand=(%8) payload=(%6)                           ; void

%8 = fn @"array_alloc"() -> void
%0: typeof(void) = .block (25 insts)
 ├ !%1: typeof(i32) = .type                                              ; typeof(i32)
 ├ !%2: int = .constant                                                  ; int{ 3 }
 ├ !%3: usize = .cast operand=(%2)                                       ; usize{ 3 }
 ├ !%4: typeof([3]i32) = .type                                           ; typeof([3]i32)
 ├ !%5: int = .constant                                                  ; int{ 1 }
 ├ !%6: int = .constant                                                  ; int{ 2 }
 ├ !%7: int = .constant                                                  ; int{ 3 }
 ├ !%8: [3]i32 = .array_init items_list=({%5, %6, %7}) type=([3]i32)     ; [3]i32[runtime]
 ├ !%9: typeof(i32) = .type                                              ; typeof(i32)
 ├ !%10: int = .constant                                                 ; int{ 3 }
 ├ !%11: usize = .cast operand=(%10)                                     ; usize{ 3 }
 ├ !%12: typeof([3]i32) = .type                                          ; typeof([3]i32)
 ├ %13: *[3]i32 = .alloc type=([3]i32) mutable=(false)                   ; *[3]i32@fffc8
 ├ %14: usize = .constant                                                ; usize{ 0 }
 ├ %15: *i32 = .get_element_pointer base=(%13) index=(%14)               ; *i32@fffc8
 ├ %16: i32 = .cast operand=(%5)                                         ; i32{ 1 }
 ├ %17: void = .store operand=(%15) payload=(%16)                        ; void
 ├ %18: usize = .constant                                                ; usize{ 1 }
 ├ %19: *i32 = .get_element_pointer base=(%13) index=(%18)               ; *i32@fffcc
 ├ %20: i32 = .cast operand=(%6)                                         ; i32{ 2 }
 ├ %21: void = .store operand=(%19) payload=(%20)                        ; void
 ├ %22: usize = .constant                                                ; usize{ 2 }
 ├ %23: *i32 = .get_element_pointer base=(%13) index=(%22)               ; *i32@fffd0
 ├ %24: i32 = .cast operand=(%7)                                         ; i32{ 3 }
 └ %25: void = .store operand=(%23) payload=(%24)                        ; void

%9 = fn @"array_alloc_2"() -> void
%0: typeof(void) = .block (31 insts)
 ├ !%1: typeof(i32) = .type                                              ; typeof(i32)
 ├ !%2: int = .constant                                                  ; int{ 3 }
 ├ !%3: usize = .cast operand=(%2)                                       ; usize{ 3 }
 ├ !%4: typeof([3]i32) = .type                                           ; typeof([3]i32)
 ├ !%5: int = .constant                                                  ; int{ 1 }
 ├ !%6: int = .constant                                                  ; int{ 2 }
 ├ !%7: int = .constant                                                  ; int{ 3 }
 ├ !%8: [3]i32 = .array_init items_list=({%5, %6, %7}) type=([3]i32)     ; [3]i32[runtime]
 ├ !%9: typeof(i32) = .type                                              ; typeof(i32)
 ├ !%10: int = .constant                                                 ; int{ 3 }
 ├ !%11: usize = .cast operand=(%10)                                     ; usize{ 3 }
 ├ !%12: typeof([3]i32) = .type                                          ; typeof([3]i32)
 ├ %13: *[3]i32 = .alloc type=([3]i32) mutable=(true)                    ; *[3]i32[runtime]
 ├ %14: usize = .constant                                                ; usize{ 0 }
 ├ %15: *i32 = .get_element_pointer base=(%13) index=(%14)               ; *i32[runtime]
 ├ %16: i32 = .cast operand=(%5)                                         ; i32{ 1 }
 ├ %17: void = .store operand=(%15) payload=(%16)                        ; void
 ├ %18: usize = .constant                                                ; usize{ 1 }
 ├ %19: *i32 = .get_element_pointer base=(%13) index=(%18)               ; *i32[runtime]
 ├ %20: i32 = .cast operand=(%6)                                         ; i32{ 2 }
 ├ %21: void = .store operand=(%19) payload=(%20)                        ; void
 ├ %22: usize = .constant                                                ; usize{ 2 }
 ├ %23: *i32 = .get_element_pointer base=(%13) index=(%22)               ; *i32[runtime]
 ├ %24: i32 = .cast operand=(%7)                                         ; i32{ 3 }
 ├ %25: void = .store operand=(%23) payload=(%24)                        ; void
 ├ !%26: int = .constant                                                 ; int{ 0 }
 ├ %27: usize = .cast operand=(%26)                                      ; usize{ 0 }
 ├ %28: *i32 = .get_element_pointer base=(%13) index=(%27)               ; *i32[runtime]
 ├ !%29: int = .constant                                                 ; int{ 4 }
 ├ %30: i32 = .cast operand=(%29)                                        ; i32{ 4 }
 └ %31: void = .store operand=(%28) payload=(%30)                        ; void

%10 = fn @"array_alloc_3"() -> void
%0: typeof(void) = .block (26 insts)
 ├ !%1: typeof(i32) = .type                                              ; typeof(i32)
 ├ !%2: int = .constant                                                  ; int{ 3 }
 ├ !%3: usize = .cast operand=(%2)                                       ; usize{ 3 }
 ├ !%4: typeof([3]i32) = .type                                           ; typeof([3]i32)
 ├ !%5: int = .constant                                                  ; int{ 1 }
 ├ !%6: int = .constant                                                  ; int{ 2 }
 ├ !%7: int = .constant                                                  ; int{ 3 }
 ├ !%8: [3]i32 = .array_init items_list=({%5, %6, %7}) type=([3]i32)     ; [3]i32[runtime]
 ├ !%9: type = .typeof operand=(%8)                                      ; type([3]i32)
 ├ %10: *[3]i32 = .alloc type=([3]i32) mutable=(false)                   ; *[3]i32@fffc0
 ├ %11: usize = .constant                                                ; usize{ 0 }
 ├ %12: *i32 = .get_element_pointer base=(%10) index=(%11)               ; *i32@fffc0
 ├ %13: i32 = .cast operand=(%5)                                         ; i32{ 1 }
 ├ %14: void = .store operand=(%12) payload=(%13)                        ; void
 ├ %15: usize = .constant                                                ; usize{ 1 }
 ├ %16: *i32 = .get_element_pointer base=(%10) index=(%15)               ; *i32@fffc4
 ├ %17: i32 = .cast operand=(%6)                                         ; i32{ 2 }
 ├ %18: void = .store operand=(%16) payload=(%17)                        ; void
 ├ %19: usize = .constant                                                ; usize{ 2 }
 ├ %20: *i32 = .get_element_pointer base=(%10) index=(%19)               ; *i32@fffc8
 ├ %21: i32 = .cast operand=(%7)                                         ; i32{ 3 }
 ├ %22: void = .store operand=(%20) payload=(%21)                        ; void
 ├ !%23: [3]i32 = .load operand=(%10)                                    ; [3]i32@fffc0
 ├ !%24: type = .typeof operand=(%23)                                    ; type([3]i32)
 ├ %25: *[3]i32 = .alloc type=([3]i32) mutable=(false)                   ; *[3]i32@fffb8
 └ %26: void = .memcpy src=(%10) dest=(%25)                              ; void

%11 = fn @"str_alloc"() -> void
%0: typeof(void) = .block (4 insts)
 ├ !%1: [5]bchar = .constant                                             ; [5]bchar@100048
 ├ !%2: type = .typeof operand=(%1)                                      ; type([5]bchar)
 ├ %3: *[5]bchar = .alloc type=([5]bchar) mutable=(false)                ; *[5]bchar@fffb0
 └ %4: void = .memcpy src=(%1) dest=(%3)                                 ; void

%12 = fn @"str_alloc_2"() -> void
%0: typeof(void) = .block (1 insts)
 └ %1: typeof(void) = comptime .block (24 insts)
    ├ !%2: [5]bchar = .constant                                             ; [5]bchar@100055
    ├ !%3: type = .typeof operand=(%2)                                      ; type([5]bchar)
    ├ %4: *[5]bchar = .alloc type=([5]bchar) mutable=(true)                 ; *[5]bchar@fffa8
    ├ %5: void = .memcpy src=(%2) dest=(%4)                                 ; void
    ├ !%6: int = .constant                                                  ; int{ 0 }
    ├ %7: usize = .cast operand=(%6)                                        ; usize{ 0 }
    ├ %8: *bchar = .get_element_pointer base=(%4) index=(%7)                ; *bchar@fffa8
    ├ %9: bchar = .load operand=(%8)                                        ; bchar{ 'H' }
    ├ !%10: type = .typeof operand=(%9)                                     ; type(bchar)
    ├ %11: *bchar = .alloc type=(bchar) mutable=(false)                     ; *bchar@fffa0
    ├ %12: void = .store operand=(%11) payload=(%9)                         ; void
    ├ !%13: int = .constant                                                 ; int{ 0 }
    ├ %14: usize = .cast operand=(%13)                                      ; usize{ 0 }
    ├ %15: *bchar = .get_element_pointer base=(%4) index=(%14)              ; *bchar@fffa8
    ├ !%16: float = .constant                                               ; float{ 104 }
    ├ %17: bchar = .cast operand=(%16)                                      ; bchar{ 'h' }
    ├ %18: void = .store operand=(%15) payload=(%17)                        ; void
    ├ !%19: int = .constant                                                 ; int{ 0 }
    ├ %20: usize = .cast operand=(%19)                                      ; usize{ 0 }
    ├ %21: *bchar = .get_element_pointer base=(%4) index=(%20)              ; *bchar@fffa8
    ├ %22: bchar = .load operand=(%21)                                      ; bchar{ 'h' }
    ├ !%23: type = .typeof operand=(%22)                                    ; type(bchar)
    ├ %24: *bchar = .alloc type=(bchar) mutable=(false)                     ; *bchar@fff98
    └ %25: void = .store operand=(%24) payload=(%22)                        ; void

%13 = fn @"foo"(i32) -> i32
%0: i32 = .block (3 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 └ %3: void = .ret maybe_operand=(%2)                                    ; void

%14 = fn @"bar"(i32) -> i32
%0: i32 = .block (5 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: fn(i32) i32 = .global_get declaration=(%15)                       ; fn(i32) i32
 ├ %3: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 ├ %4: i32 = .fn_call callee=(%2) callee_entity=(%16) callee_declaration=(%15) args_list=({%3}); i32{ [runtime] }
 └ %5: void = .ret maybe_operand=(%4)                                    ; void

%15 = fn @"rec"(i32) -> i32
%0: i32 = .block (8 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 ├ !%3: int = .constant                                                  ; int{ 10 }
 ├ %4: i32 = .cast operand=(%3)                                          ; i32{ 10 }
 ├ %5: bool = .lt lhs=(%2) rhs=(%4)                                      ; bool{ [runtime] }
 ├ %6: if (%5)
 │  └ then: %7: typeof(i32) = .block (7 insts)
 │     ├ %8: fn(i32) i32 = .global_get declaration=(%14)                       ; fn(i32) i32
 │     ├ !%9: int = .constant                                                  ; int{ 2 }
 │     ├ %10: i32 = .param_get operand=(%1)                                    ; i32{ [runtime] }
 │     ├ %11: i32 = .cast operand=(%9)                                         ; i32{ 2 }
 │     ├ %12: i32 = .mul lhs=(%11) rhs=(%10)                                   ; i32{ [runtime] }
 │     ├ %13: i32 = .fn_call callee=(%8) callee_entity=(%15) callee_declaration=(%14) args_list=({%12}); i32{ [runtime] }
 │     └ %14: void = .ret maybe_operand=(%13)                                  ; void
 ├ %15: i32 = .param_get operand=(%1)                                    ; i32{ [runtime] }
 └ %16: void = .ret maybe_operand=(%15)                                  ; void

%16 = fn @"sum_array"() -> i32
%0: i32 = .block (43 insts)
 ├ !%1: typeof(i32) = .type                                              ; typeof(i32)
 ├ !%2: int = .constant                                                  ; int{ 4 }
 ├ !%3: usize = .cast operand=(%2)                                       ; usize{ 4 }
 ├ !%4: typeof([4]i32) = .type                                           ; typeof([4]i32)
 ├ !%5: int = .constant                                                  ; int{ 1 }
 ├ !%6: int = .constant                                                  ; int{ 2 }
 ├ !%7: int = .constant                                                  ; int{ 3 }
 ├ !%8: int = .constant                                                  ; int{ 4 }
 ├ !%9: [4]i32 = .array_init items_list=({%5, %6, %7, %8}) type=([4]i32) ; [4]i32[runtime]
 ├ !%10: typeof(i32) = .type                                             ; typeof(i32)
 ├ !%11: int = .constant                                                 ; int{ 4 }
 ├ !%12: usize = .cast operand=(%11)                                     ; usize{ 4 }
 ├ !%13: typeof([4]i32) = .type                                          ; typeof([4]i32)
 ├ %14: *[4]i32 = .alloc type=([4]i32) mutable=(false)                   ; *[4]i32@fff90
 ├ %15: usize = .constant                                                ; usize{ 0 }
 ├ %16: *i32 = .get_element_pointer base=(%14) index=(%15)               ; *i32@fff90
 ├ %17: i32 = .cast operand=(%5)                                         ; i32{ 1 }
 ├ %18: void = .store operand=(%16) payload=(%17)                        ; void
 ├ %19: usize = .constant                                                ; usize{ 1 }
 ├ %20: *i32 = .get_element_pointer base=(%14) index=(%19)               ; *i32@fff94
 ├ %21: i32 = .cast operand=(%6)                                         ; i32{ 2 }
 ├ %22: void = .store operand=(%20) payload=(%21)                        ; void
 ├ %23: usize = .constant                                                ; usize{ 2 }
 ├ %24: *i32 = .get_element_pointer base=(%14) index=(%23)               ; *i32@fff98
 ├ %25: i32 = .cast operand=(%7)                                         ; i32{ 3 }
 ├ %26: void = .store operand=(%24) payload=(%25)                        ; void
 ├ %27: usize = .constant                                                ; usize{ 3 }
 ├ %28: *i32 = .get_element_pointer base=(%14) index=(%27)               ; *i32@fff9c
 ├ %29: i32 = .cast operand=(%8)                                         ; i32{ 4 }
 ├ %30: void = .store operand=(%28) payload=(%29)                        ; void
 ├ !%31: int = .constant                                                 ; int{ 0 }
 ├ !%32: typeof(i32) = .type                                             ; typeof(i32)
 ├ %33: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32[runtime]
 ├ %34: i32 = .cast operand=(%31)                                        ; i32{ 0 }
 ├ %35: void = .store operand=(%33) payload=(%34)                        ; void
 ├ !%36: int = .constant                                                 ; int{ 0 }
 ├ !%37: typeof(i32) = .type                                             ; typeof(i32)
 ├ %38: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32[runtime]
 ├ %39: i32 = .cast operand=(%36)                                        ; i32{ 0 }
 ├ %40: void = .store operand=(%38) payload=(%39)                        ; void
 ├ %41 loop
 │  └ %42: void = .block (7 insts)
 │     ├ %43: i32 = .load operand=(%33)                                        ; i32{ [runtime] }
 │     ├ !%44: usize = .constant                                               ; usize{ 4 }
 │     ├ !%45: [builtin_as] = .constant operand=(%44)                          ; todo_complex(builtin_member)
 │     ├ !%46: typeof(i32) = .type                                             ; typeof(i32)
 │     ├ %47: i32 = .reinterpret operand=(%44)                                 ; i32{ 4 }
 │     ├ %48: bool = .lt lhs=(%43) rhs=(%47)                                   ; bool{ [runtime] }
 │     └ %49: if (%48)
 │        └ then: %50: typeof(i32) = .block (12 insts)
 │           ├ %51: i32 = .load operand=(%38)                                        ; i32{ [runtime] }
 │           ├ %52: i32 = .load operand=(%33)                                        ; i32{ [runtime] }
 │           ├ %53: *i32 = .get_element_pointer base=(%14) index=(%52)               ; *i32[runtime]
 │           ├ %54: i32 = .load operand=(%53)                                        ; i32{ [runtime] }
 │           ├ %55: i32 = .add lhs=(%51) rhs=(%54)                                   ; i32{ [runtime] }
 │           ├ %56: void = .store operand=(%38) payload=(%55)                        ; void
 │           ├ %57: i32 = .load operand=(%33)                                        ; i32{ [runtime] }
 │           ├ !%58: int = .constant                                                 ; int{ 1 }
 │           ├ %59: i32 = .cast operand=(%58)                                        ; i32{ 1 }
 │           ├ %60: i32 = .add lhs=(%57) rhs=(%59)                                   ; i32{ [runtime] }
 │           ├ %61: void = .store operand=(%33) payload=(%60)                        ; void
 │           └ %62: void = .br target=(%41) payload=(null)                           ; void
 ├ %63: i32 = .load operand=(%38)                                        ; i32{ [runtime] }
 └ %64: void = .ret maybe_operand=(%63)                                  ; void

%17 = pub fn @"fib2"() -> i32
%0: i32 = .block (1 insts)
 └ %1: typeof(i32) = comptime .block (20 insts)
    ├ !%2: int = .constant                                                  ; int{ 10 }
    ├ !%3: typeof(i32) = .type                                              ; typeof(i32)
    ├ %4: *i32 = .alloc type=(i32) mutable=(true)                           ; *i32@fff88
    ├ %5: i32 = .cast operand=(%2)                                          ; i32{ 10 }
    ├ %6: void = .store operand=(%4) payload=(%5)                           ; void
    ├ !%7: int = .constant                                                  ; int{ 0 }
    ├ !%8: typeof(i32) = .type                                              ; typeof(i32)
    ├ %9: *i32 = .alloc type=(i32) mutable=(true)                           ; *i32@fff80
    ├ %10: i32 = .cast operand=(%7)                                         ; i32{ 0 }
    ├ %11: void = .store operand=(%9) payload=(%10)                         ; void
    ├ !%12: int = .constant                                                 ; int{ 1 }
    ├ !%13: typeof(i32) = .type                                             ; typeof(i32)
    ├ %14: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32@fff78
    ├ %15: i32 = .cast operand=(%12)                                        ; i32{ 1 }
    ├ %16: void = .store operand=(%14) payload=(%15)                        ; void
    ├ !%17: i32 = .load operand=(%4)                                        ; i32{ 10 }
    ├ !%18: int = .constant                                                 ; int{ 0 }
    ├ !%19: i32 = .cast operand=(%18)                                       ; i32{ 0 }
    ├ !%20: bool = .gt lhs=(%17) rhs=(%19)                                  ; true
    └ %21: typeof(i32) = comptime .block (3 insts)
       ├ %22: void = comptime .block (5 insts)
       │  ├ !%23: i32 = .load operand=(%4)                                        ; i32{ 10 }
       │  ├ !%24: int = .constant                                                 ; int{ 1 }
       │  ├ !%25: i32 = .cast operand=(%24)                                       ; i32{ 1 }
       │  ├ !%26: bool = .gt lhs=(%23) rhs=(%25)                                  ; true
       │  └ %27: typeof(i32) = comptime .block (16 insts)
       │     ├ !%28: i32 = .load operand=(%9)                                        ; i32{ 0 }
       │     ├ !%29: i32 = .load operand=(%14)                                       ; i32{ 1 }
       │     ├ %30: i32 = .add lhs=(%28) rhs=(%29)                                   ; i32{ 1 }
       │     ├ !%31: typeof(i32) = .type                                             ; typeof(i32)
       │     ├ %32: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32@fff70
       │     ├ %33: void = .store operand=(%32) payload=(%30)                        ; void
       │     ├ %34: i32 = .load operand=(%14)                                        ; i32{ 1 }
       │     ├ %35: void = .store operand=(%9) payload=(%34)                         ; void
       │     ├ %36: i32 = .load operand=(%32)                                        ; i32{ 1 }
       │     ├ %37: void = .store operand=(%14) payload=(%36)                        ; void
       │     ├ !%38: i32 = .load operand=(%4)                                        ; i32{ 10 }
       │     ├ !%39: int = .constant                                                 ; int{ 1 }
       │     ├ !%40: i32 = .cast operand=(%39)                                       ; i32{ 1 }
       │     ├ %41: i32 = .sub lhs=(%38) rhs=(%40)                                   ; i32{ 9 }
       │     ├ %42: void = .store operand=(%4) payload=(%41)                         ; void
       │     └ %43: void = comptime .block (5 insts)
       │        ├ !%44: i32 = .load operand=(%4)                                        ; i32{ 9 }
       │        ├ !%45: int = .constant                                                 ; int{ 1 }
       │        ├ !%46: i32 = .cast operand=(%45)                                       ; i32{ 1 }
       │        ├ !%47: bool = .gt lhs=(%44) rhs=(%46)                                  ; true
       │        └ %48: typeof(i32) = comptime .block (16 insts)
       │           ├ !%49: i32 = .load operand=(%9)                                        ; i32{ 1 }
       │           ├ !%50: i32 = .load operand=(%14)                                       ; i32{ 1 }
       │           ├ %51: i32 = .add lhs=(%49) rhs=(%50)                                   ; i32{ 2 }
       │           ├ !%52: typeof(i32) = .type                                             ; typeof(i32)
       │           ├ %53: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32@fff68
       │           ├ %54: void = .store operand=(%53) payload=(%51)                        ; void
       │           ├ %55: i32 = .load operand=(%14)                                        ; i32{ 1 }
       │           ├ %56: void = .store operand=(%9) payload=(%55)                         ; void
       │           ├ %57: i32 = .load operand=(%53)                                        ; i32{ 2 }
       │           ├ %58: void = .store operand=(%14) payload=(%57)                        ; void
       │           ├ !%59: i32 = .load operand=(%4)                                        ; i32{ 9 }
       │           ├ !%60: int = .constant                                                 ; int{ 1 }
       │           ├ !%61: i32 = .cast operand=(%60)                                       ; i32{ 1 }
       │           ├ %62: i32 = .sub lhs=(%59) rhs=(%61)                                   ; i32{ 8 }
       │           ├ %63: void = .store operand=(%4) payload=(%62)                         ; void
       │           └ %64: void = comptime .block (5 insts)
       │              ├ !%65: i32 = .load operand=(%4)                                        ; i32{ 8 }
       │              ├ !%66: int = .constant                                                 ; int{ 1 }
       │              ├ !%67: i32 = .cast operand=(%66)                                       ; i32{ 1 }
       │              ├ !%68: bool = .gt lhs=(%65) rhs=(%67)                                  ; true
       │              └ %69: typeof(i32) = comptime .block (16 insts)
       │                 ├ !%70: i32 = .load operand=(%9)                                        ; i32{ 1 }
       │                 ├ !%71: i32 = .load operand=(%14)                                       ; i32{ 2 }
       │                 ├ %72: i32 = .add lhs=(%70) rhs=(%71)                                   ; i32{ 3 }
       │                 ├ !%73: typeof(i32) = .type                                             ; typeof(i32)
       │                 ├ %74: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32@fff60
       │                 ├ %75: void = .store operand=(%74) payload=(%72)                        ; void
       │                 ├ %76: i32 = .load operand=(%14)                                        ; i32{ 2 }
       │                 ├ %77: void = .store operand=(%9) payload=(%76)                         ; void
       │                 ├ %78: i32 = .load operand=(%74)                                        ; i32{ 3 }
       │                 ├ %79: void = .store operand=(%14) payload=(%78)                        ; void
       │                 ├ !%80: i32 = .load operand=(%4)                                        ; i32{ 8 }
       │                 ├ !%81: int = .constant                                                 ; int{ 1 }
       │                 ├ !%82: i32 = .cast operand=(%81)                                       ; i32{ 1 }
       │                 ├ %83: i32 = .sub lhs=(%80) rhs=(%82)                                   ; i32{ 7 }
       │                 ├ %84: void = .store operand=(%4) payload=(%83)                         ; void
       │                 └ %85: void = comptime .block (5 insts)
       │                    ├ !%86: i32 = .load operand=(%4)                                        ; i32{ 7 }
       │                    ├ !%87: int = .constant                                                 ; int{ 1 }
       │                    ├ !%88: i32 = .cast operand=(%87)                                       ; i32{ 1 }
       │                    ├ !%89: bool = .gt lhs=(%86) rhs=(%88)                                  ; true
       │                    └ %90: typeof(i32) = comptime .block (16 insts)
       │                       ├ !%91: i32 = .load operand=(%9)                                        ; i32{ 2 }
       │                       ├ !%92: i32 = .load operand=(%14)                                       ; i32{ 3 }
       │                       ├ %93: i32 = .add lhs=(%91) rhs=(%92)                                   ; i32{ 5 }
       │                       ├ !%94: typeof(i32) = .type                                             ; typeof(i32)
       │                       ├ %95: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32@fff58
       │                       ├ %96: void = .store operand=(%95) payload=(%93)                        ; void
       │                       ├ %97: i32 = .load operand=(%14)                                        ; i32{ 3 }
       │                       ├ %98: void = .store operand=(%9) payload=(%97)                         ; void
       │                       ├ %99: i32 = .load operand=(%95)                                        ; i32{ 5 }
       │                       ├ %100: void = .store operand=(%14) payload=(%99)                       ; void
       │                       ├ !%101: i32 = .load operand=(%4)                                       ; i32{ 7 }
       │                       ├ !%102: int = .constant                                                ; int{ 1 }
       │                       ├ !%103: i32 = .cast operand=(%102)                                     ; i32{ 1 }
       │                       ├ %104: i32 = .sub lhs=(%101) rhs=(%103)                                ; i32{ 6 }
       │                       ├ %105: void = .store operand=(%4) payload=(%104)                       ; void
       │                       └ %106: void = comptime .block (5 insts)
       │                          ├ !%107: i32 = .load operand=(%4)                                       ; i32{ 6 }
       │                          ├ !%108: int = .constant                                                ; int{ 1 }
       │                          ├ !%109: i32 = .cast operand=(%108)                                     ; i32{ 1 }
       │                          ├ !%110: bool = .gt lhs=(%107) rhs=(%109)                               ; true
       │                          └ %111: typeof(i32) = comptime .block (16 insts)
       │                             ├ !%112: i32 = .load operand=(%9)                                       ; i32{ 3 }
       │                             ├ !%113: i32 = .load operand=(%14)                                      ; i32{ 5 }
       │                             ├ %114: i32 = .add lhs=(%112) rhs=(%113)                                ; i32{ 8 }
       │                             ├ !%115: typeof(i32) = .type                                            ; typeof(i32)
       │                             ├ %116: *i32 = .alloc type=(i32) mutable=(true)                         ; *i32@fff50
       │                             ├ %117: void = .store operand=(%116) payload=(%114)                     ; void
       │                             ├ %118: i32 = .load operand=(%14)                                       ; i32{ 5 }
       │                             ├ %119: void = .store operand=(%9) payload=(%118)                       ; void
       │                             ├ %120: i32 = .load operand=(%116)                                      ; i32{ 8 }
       │                             ├ %121: void = .store operand=(%14) payload=(%120)                      ; void
       │                             ├ !%122: i32 = .load operand=(%4)                                       ; i32{ 6 }
       │                             ├ !%123: int = .constant                                                ; int{ 1 }
       │                             ├ !%124: i32 = .cast operand=(%123)                                     ; i32{ 1 }
       │                             ├ %125: i32 = .sub lhs=(%122) rhs=(%124)                                ; i32{ 5 }
       │                             ├ %126: void = .store operand=(%4) payload=(%125)                       ; void
       │                             └ %127: void = comptime .block (5 insts)
       │                                ├ !%128: i32 = .load operand=(%4)                                       ; i32{ 5 }
       │                                ├ !%129: int = .constant                                                ; int{ 1 }
       │                                ├ !%130: i32 = .cast operand=(%129)                                     ; i32{ 1 }
       │                                ├ !%131: bool = .gt lhs=(%128) rhs=(%130)                               ; true
       │                                └ %132: typeof(i32) = comptime .block (16 insts)
       │                                   ├ !%133: i32 = .load operand=(%9)                                       ; i32{ 5 }
       │                                   ├ !%134: i32 = .load operand=(%14)                                      ; i32{ 8 }
       │                                   ├ %135: i32 = .add lhs=(%133) rhs=(%134)                                ; i32{ 13 }
       │                                   ├ !%136: typeof(i32) = .type                                            ; typeof(i32)
       │                                   ├ %137: *i32 = .alloc type=(i32) mutable=(true)                         ; *i32@fff48
       │                                   ├ %138: void = .store operand=(%137) payload=(%135)                     ; void
       │                                   ├ %139: i32 = .load operand=(%14)                                       ; i32{ 8 }
       │                                   ├ %140: void = .store operand=(%9) payload=(%139)                       ; void
       │                                   ├ %141: i32 = .load operand=(%137)                                      ; i32{ 13 }
       │                                   ├ %142: void = .store operand=(%14) payload=(%141)                      ; void
       │                                   ├ !%143: i32 = .load operand=(%4)                                       ; i32{ 5 }
       │                                   ├ !%144: int = .constant                                                ; int{ 1 }
       │                                   ├ !%145: i32 = .cast operand=(%144)                                     ; i32{ 1 }
       │                                   ├ %146: i32 = .sub lhs=(%143) rhs=(%145)                                ; i32{ 4 }
       │                                   ├ %147: void = .store operand=(%4) payload=(%146)                       ; void
       │                                   └ %148: void = comptime .block (5 insts)
       │                                      ├ !%149: i32 = .load operand=(%4)                                       ; i32{ 4 }
       │                                      ├ !%150: int = .constant                                                ; int{ 1 }
       │                                      ├ !%151: i32 = .cast operand=(%150)                                     ; i32{ 1 }
       │                                      ├ !%152: bool = .gt lhs=(%149) rhs=(%151)                               ; true
       │                                      └ %153: typeof(i32) = comptime .block (16 insts)
       │                                         ├ !%154: i32 = .load operand=(%9)                                       ; i32{ 8 }
       │                                         ├ !%155: i32 = .load operand=(%14)                                      ; i32{ 13 }
       │                                         ├ %156: i32 = .add lhs=(%154) rhs=(%155)                                ; i32{ 21 }
       │                                         ├ !%157: typeof(i32) = .type                                            ; typeof(i32)
       │                                         ├ %158: *i32 = .alloc type=(i32) mutable=(true)                         ; *i32@fff40
       │                                         ├ %159: void = .store operand=(%158) payload=(%156)                     ; void
       │                                         ├ %160: i32 = .load operand=(%14)                                       ; i32{ 13 }
       │                                         ├ %161: void = .store operand=(%9) payload=(%160)                       ; void
       │                                         ├ %162: i32 = .load operand=(%158)                                      ; i32{ 21 }
       │                                         ├ %163: void = .store operand=(%14) payload=(%162)                      ; void
       │                                         ├ !%164: i32 = .load operand=(%4)                                       ; i32{ 4 }
       │                                         ├ !%165: int = .constant                                                ; int{ 1 }
       │                                         ├ !%166: i32 = .cast operand=(%165)                                     ; i32{ 1 }
       │                                         ├ %167: i32 = .sub lhs=(%164) rhs=(%166)                                ; i32{ 3 }
       │                                         ├ %168: void = .store operand=(%4) payload=(%167)                       ; void
       │                                         └ %169: void = comptime .block (5 insts)
       │                                            ├ !%170: i32 = .load operand=(%4)                                       ; i32{ 3 }
       │                                            ├ !%171: int = .constant                                                ; int{ 1 }
       │                                            ├ !%172: i32 = .cast operand=(%171)                                     ; i32{ 1 }
       │                                            ├ !%173: bool = .gt lhs=(%170) rhs=(%172)                               ; true
       │                                            └ %174: typeof(i32) = comptime .block (16 insts)
       │                                               ├ !%175: i32 = .load operand=(%9)                                       ; i32{ 13 }
       │                                               ├ !%176: i32 = .load operand=(%14)                                      ; i32{ 21 }
       │                                               ├ %177: i32 = .add lhs=(%175) rhs=(%176)                                ; i32{ 34 }
       │                                               ├ !%178: typeof(i32) = .type                                            ; typeof(i32)
       │                                               ├ %179: *i32 = .alloc type=(i32) mutable=(true)                         ; *i32@fff38
       │                                               ├ %180: void = .store operand=(%179) payload=(%177)                     ; void
       │                                               ├ %181: i32 = .load operand=(%14)                                       ; i32{ 21 }
       │                                               ├ %182: void = .store operand=(%9) payload=(%181)                       ; void
       │                                               ├ %183: i32 = .load operand=(%179)                                      ; i32{ 34 }
       │                                               ├ %184: void = .store operand=(%14) payload=(%183)                      ; void
       │                                               ├ !%185: i32 = .load operand=(%4)                                       ; i32{ 3 }
       │                                               ├ !%186: int = .constant                                                ; int{ 1 }
       │                                               ├ !%187: i32 = .cast operand=(%186)                                     ; i32{ 1 }
       │                                               ├ %188: i32 = .sub lhs=(%185) rhs=(%187)                                ; i32{ 2 }
       │                                               ├ %189: void = .store operand=(%4) payload=(%188)                       ; void
       │                                               └ %190: void = comptime .block (5 insts)
       │                                                  ├ !%191: i32 = .load operand=(%4)                                       ; i32{ 2 }
       │                                                  ├ !%192: int = .constant                                                ; int{ 1 }
       │                                                  ├ !%193: i32 = .cast operand=(%192)                                     ; i32{ 1 }
       │                                                  ├ !%194: bool = .gt lhs=(%191) rhs=(%193)                               ; true
       │                                                  └ %195: typeof(i32) = comptime .block (16 insts)
       │                                                     ├ !%196: i32 = .load operand=(%9)                                       ; i32{ 21 }
       │                                                     ├ !%197: i32 = .load operand=(%14)                                      ; i32{ 34 }
       │                                                     ├ %198: i32 = .add lhs=(%196) rhs=(%197)                                ; i32{ 55 }
       │                                                     ├ !%199: typeof(i32) = .type                                            ; typeof(i32)
       │                                                     ├ %200: *i32 = .alloc type=(i32) mutable=(true)                         ; *i32@fff30
       │                                                     ├ %201: void = .store operand=(%200) payload=(%198)                     ; void
       │                                                     ├ %202: i32 = .load operand=(%14)                                       ; i32{ 34 }
       │                                                     ├ %203: void = .store operand=(%9) payload=(%202)                       ; void
       │                                                     ├ %204: i32 = .load operand=(%200)                                      ; i32{ 55 }
       │                                                     ├ %205: void = .store operand=(%14) payload=(%204)                      ; void
       │                                                     ├ !%206: i32 = .load operand=(%4)                                       ; i32{ 2 }
       │                                                     ├ !%207: int = .constant                                                ; int{ 1 }
       │                                                     ├ !%208: i32 = .cast operand=(%207)                                     ; i32{ 1 }
       │                                                     ├ %209: i32 = .sub lhs=(%206) rhs=(%208)                                ; i32{ 1 }
       │                                                     ├ %210: void = .store operand=(%4) payload=(%209)                       ; void
       │                                                     └ %211: void = comptime .block (5 insts)
       │                                                        ├ !%212: i32 = .load operand=(%4)                                       ; i32{ 1 }
       │                                                        ├ !%213: int = .constant                                                ; int{ 1 }
       │                                                        ├ !%214: i32 = .cast operand=(%213)                                     ; i32{ 1 }
       │                                                        ├ !%215: bool = .gt lhs=(%212) rhs=(%214)                               ; false
       │                                                        └ !%216: void = .block                                                  ; void
       ├ %217: i32 = .load operand=(%14)                                       ; i32{ 55 }
       └ %218: void = .ret maybe_operand=(%217)                                ; void

%18 = pub fn @"fib"(i32) -> i32
%0: i32 = .block (18 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ !%2: int = .constant                                                  ; int{ 0 }
 ├ !%3: typeof(i32) = .type                                              ; typeof(i32)
 ├ %4: *i32 = .alloc type=(i32) mutable=(true)                           ; *i32[runtime]
 ├ %5: i32 = .cast operand=(%2)                                          ; i32{ 0 }
 ├ %6: void = .store operand=(%4) payload=(%5)                           ; void
 ├ !%7: int = .constant                                                  ; int{ 1 }
 ├ !%8: typeof(i32) = .type                                              ; typeof(i32)
 ├ %9: *i32 = .alloc type=(i32) mutable=(true)                           ; *i32[runtime]
 ├ %10: i32 = .cast operand=(%7)                                         ; i32{ 1 }
 ├ %11: void = .store operand=(%9) payload=(%10)                         ; void
 ├ %12: i32 = .param_get operand=(%1)                                    ; i32{ [runtime] }
 ├ !%13: int = .constant                                                 ; int{ 0 }
 ├ %14: i32 = .cast operand=(%13)                                        ; i32{ 0 }
 ├ %15: bool = .gt lhs=(%12) rhs=(%14)                                   ; bool{ [runtime] }
 ├ %16: if (%15)
 │  └ then: %17: typeof(i32) = .block (3 insts)
 │     ├ %18 loop
 │     │  └ %19: void = .block (5 insts)
 │     │     ├ %20: i32 = .param_get operand=(%1)                                    ; i32{ [runtime] }
 │     │     ├ !%21: int = .constant                                                 ; int{ 1 }
 │     │     ├ %22: i32 = .cast operand=(%21)                                        ; i32{ 1 }
 │     │     ├ %23: bool = .gt lhs=(%20) rhs=(%22)                                   ; bool{ [runtime] }
 │     │     └ %24: if (%23)
 │     │        └ then: %25: typeof(i32) = .block (16 insts)
 │     │           ├ %26: i32 = .load operand=(%4)                                         ; i32{ [runtime] }
 │     │           ├ %27: i32 = .load operand=(%9)                                         ; i32{ [runtime] }
 │     │           ├ %28: i32 = .add lhs=(%26) rhs=(%27)                                   ; i32{ [runtime] }
 │     │           ├ !%29: typeof(i32) = .type                                             ; typeof(i32)
 │     │           ├ %30: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32[runtime]
 │     │           ├ %31: void = .store operand=(%30) payload=(%28)                        ; void
 │     │           ├ %32: i32 = .load operand=(%9)                                         ; i32{ [runtime] }
 │     │           ├ %33: void = .store operand=(%4) payload=(%32)                         ; void
 │     │           ├ %34: i32 = .load operand=(%30)                                        ; i32{ [runtime] }
 │     │           ├ %35: void = .store operand=(%9) payload=(%34)                         ; void
 │     │           ├ %36: i32 = .param_get operand=(%1)                                    ; i32{ [runtime] }
 │     │           ├ !%37: int = .constant                                                 ; int{ 1 }
 │     │           ├ %38: i32 = .cast operand=(%37)                                        ; i32{ 1 }
 │     │           ├ %39: i32 = .sub lhs=(%36) rhs=(%38)                                   ; i32{ [runtime] }
 │     │           ├ %40: void = .param_set operand=(%1) payload=(%39)                     ; void
 │     │           └ %41: void = .br target=(%18) payload=(null)                           ; void
 │     ├ %42: i32 = .load operand=(%9)                                         ; i32{ [runtime] }
 │     └ %43: void = .ret maybe_operand=(%42)                                  ; void
 ├ %44: i32 = .load operand=(%4)                                         ; i32{ [runtime] }
 └ %45: void = .ret maybe_operand=(%44)                                  ; void

%19 = fn @"explicit_casting"() -> i32
%0: typeof(i32) = .block (10 insts)
 ├ !%1: float = .constant                                                ; float{ 123.2 }
 ├ !%2: [builtin_as] = .constant operand=(%1)                            ; todo_complex(builtin_member)
 ├ !%3: typeof(i32) = .type                                              ; typeof(i32)
 ├ !%4: i32 = .cast operand=(%1)                                         ; i32{ 123 }
 ├ !%5: [builtin_as] = .constant operand=(%4)                            ; todo_complex(builtin_member)
 ├ !%6: typeof(u8) = .type                                               ; typeof(u8)
 ├ !%7: u8 = .reinterpret operand=(%4)                                   ; u8{ 123 }
 ├ !%8: [builtin_as] = .constant operand=(%7)                            ; todo_complex(builtin_member)
 ├ !%9: typeof(f32) = .type                                              ; typeof(f32)
 └ %10: f32 = .convert_int_to_float operand=(%7)                         ; f32{ 123 }

%20 = global @"K" todo_complex(global) 
%0: typeof(struct{}) = .block (2 insts)
 ├ %1: typeof(struct{}) = .type                                          ; typeof(struct{})
 └ %2: void = .br target=(%0) payload=(1)                                ; void

%21 = fn @"bar_add"(i32, i32) -> i32
%0: i32 = .block (6 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: i32 = .param index=(%1)                                           ; i32{ [runtime] }
 ├ %3: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 ├ %4: i32 = .param_get operand=(%2)                                     ; i32{ [runtime] }
 ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                      ; i32{ [runtime] }
 └ %6: void = .ret maybe_operand=(%5)                                    ; void

%22 = fn @"namespaced"() -> void
%0: typeof(void) = .block (10 insts)
 ├ %1: typeof(struct{}) = .global_get declaration=(%20)                  ; typeof(struct{})
 ├ %2: fn(i32, i32) i32 = .global_get declaration=(%35)                  ; fn(i32, i32) i32
 ├ !%3: int = .constant                                                  ; int{ 1 }
 ├ !%4: int = .constant                                                  ; int{ 2 }
 ├ %5: i32 = .cast operand=(%3)                                          ; i32{ 1 }
 ├ %6: i32 = .cast operand=(%4)                                          ; i32{ 2 }
 ├ %7: i32 = .fn_call callee=(%2) callee_entity=(%105) callee_declaration=(%35) args_list=({%5, %6}); i32{ [runtime] }
 ├ !%8: type = .typeof operand=(%7)                                      ; type(i32)
 ├ %9: *i32 = .alloc type=(i32) mutable=(false)                          ; *i32[runtime]
 └ %10: void = .store operand=(%9) payload=(%7)                          ; void

%23 = fn @"global"() -> void
%0: typeof(void) = .block (9 insts)
 ├ %1: fn(i32, i32) i32 = .global_get declaration=(%21)                  ; fn(i32, i32) i32
 ├ !%2: int = .constant                                                  ; int{ 1 }
 ├ !%3: int = .constant                                                  ; int{ 2 }
 ├ %4: i32 = .cast operand=(%2)                                          ; i32{ 1 }
 ├ %5: i32 = .cast operand=(%3)                                          ; i32{ 2 }
 ├ %6: i32 = .fn_call callee=(%1) callee_entity=(%22) callee_declaration=(%21) args_list=({%4, %5}); i32{ [runtime] }
 ├ !%7: type = .typeof operand=(%6)                                      ; type(i32)
 ├ %8: *i32 = .alloc type=(i32) mutable=(false)                          ; *i32[runtime]
 └ %9: void = .store operand=(%8) payload=(%6)                           ; void

%24 = fn @"builtin"() -> void
%0: typeof(void) = .block (7 insts)
 ├ !%1: int = .constant                                                  ; int{ 2 }
 ├ !%2: [builtin_as] = .constant operand=(%1)                            ; todo_complex(builtin_member)
 ├ !%3: typeof(i32) = .type                                              ; typeof(i32)
 ├ %4: i32 = .cast operand=(%1)                                          ; i32{ 2 }
 ├ !%5: type = .typeof operand=(%4)                                      ; type(i32)
 ├ %6: *i32 = .alloc type=(i32) mutable=(false)                          ; *i32@fff28
 └ %7: void = .store operand=(%6) payload=(%4)                           ; void

%25 = fn @"main"(i32) -> i32
%0: i32 = .block (18 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ !%2: int = .constant                                                  ; int{ 0 }
 ├ !%3: typeof(i32) = .type                                              ; typeof(i32)
 ├ %4: *i32 = .alloc type=(i32) mutable=(true)                           ; *i32[runtime]
 ├ %5: i32 = .cast operand=(%2)                                          ; i32{ 0 }
 ├ %6: void = .store operand=(%4) payload=(%5)                           ; void
 ├ !%7: int = .constant                                                  ; int{ 1 }
 ├ !%8: typeof(i32) = .type                                              ; typeof(i32)
 ├ %9: *i32 = .alloc type=(i32) mutable=(true)                           ; *i32[runtime]
 ├ %10: i32 = .cast operand=(%7)                                         ; i32{ 1 }
 ├ %11: void = .store operand=(%9) payload=(%10)                         ; void
 ├ %12: i32 = .param_get operand=(%1)                                    ; i32{ [runtime] }
 ├ !%13: int = .constant                                                 ; int{ 0 }
 ├ %14: i32 = .cast operand=(%13)                                        ; i32{ 0 }
 ├ %15: bool = .gt lhs=(%12) rhs=(%14)                                   ; bool{ [runtime] }
 ├ %16: if (%15)
 │  └ then: %17: typeof(i32) = .block (3 insts)
 │     ├ %18 loop
 │     │  └ %19: void = .block (5 insts)
 │     │     ├ %20: i32 = .param_get operand=(%1)                                    ; i32{ [runtime] }
 │     │     ├ !%21: int = .constant                                                 ; int{ 1 }
 │     │     ├ %22: i32 = .cast operand=(%21)                                        ; i32{ 1 }
 │     │     ├ %23: bool = .gt lhs=(%20) rhs=(%22)                                   ; bool{ [runtime] }
 │     │     └ %24: if (%23)
 │     │        └ then: %25: typeof(i32) = .block (16 insts)
 │     │           ├ %26: i32 = .load operand=(%4)                                         ; i32{ [runtime] }
 │     │           ├ %27: i32 = .load operand=(%9)                                         ; i32{ [runtime] }
 │     │           ├ %28: i32 = .add lhs=(%26) rhs=(%27)                                   ; i32{ [runtime] }
 │     │           ├ !%29: typeof(i32) = .type                                             ; typeof(i32)
 │     │           ├ %30: *i32 = .alloc type=(i32) mutable=(true)                          ; *i32[runtime]
 │     │           ├ %31: void = .store operand=(%30) payload=(%28)                        ; void
 │     │           ├ %32: i32 = .load operand=(%9)                                         ; i32{ [runtime] }
 │     │           ├ %33: void = .store operand=(%4) payload=(%32)                         ; void
 │     │           ├ %34: i32 = .load operand=(%30)                                        ; i32{ [runtime] }
 │     │           ├ %35: void = .store operand=(%9) payload=(%34)                         ; void
 │     │           ├ %36: i32 = .param_get operand=(%1)                                    ; i32{ [runtime] }
 │     │           ├ !%37: int = .constant                                                 ; int{ 1 }
 │     │           ├ %38: i32 = .cast operand=(%37)                                        ; i32{ 1 }
 │     │           ├ %39: i32 = .sub lhs=(%36) rhs=(%38)                                   ; i32{ [runtime] }
 │     │           ├ %40: void = .param_set operand=(%1) payload=(%39)                     ; void
 │     │           └ %41: void = .br target=(%18) payload=(null)                           ; void
 │     ├ %42: i32 = .load operand=(%9)                                         ; i32{ [runtime] }
 │     └ %43: void = .ret maybe_operand=(%42)                                  ; void
 ├ %44: i32 = .load operand=(%4)                                         ; i32{ [runtime] }
 └ %45: void = .ret maybe_operand=(%44)                                  ; void

%26 = fn @"aaaa"(i32) -> void
%0: typeof(void) = .block (1 insts)
 └ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }

%27 = fn @"foo_addd"(i32, i32) -> i32
%0: i32 = .block (6 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: i32 = .param index=(%1)                                           ; i32{ [runtime] }
 ├ %3: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 ├ %4: i32 = .param_get operand=(%2)                                     ; i32{ [runtime] }
 ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                      ; i32{ [runtime] }
 └ %6: void = .ret maybe_operand=(%5)                                    ; void

%28 = fn @"foo_ad3d"(i32, i32) -> i32
%0: i32 = .block (6 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: i32 = .param index=(%1)                                           ; i32{ [runtime] }
 ├ %3: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 ├ %4: i32 = .param_get operand=(%2)                                     ; i32{ [runtime] }
 ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                      ; i32{ [runtime] }
 └ %6: void = .ret maybe_operand=(%5)                                    ; void

%29 = fn @"fdsdss"(i32, i32) -> i32
%0: i32 = .block (6 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: i32 = .param index=(%1)                                           ; i32{ [runtime] }
 ├ %3: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 ├ %4: i32 = .param_get operand=(%2)                                     ; i32{ [runtime] }
 ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                      ; i32{ [runtime] }
 └ %6: void = .ret maybe_operand=(%5)                                    ; void

%30 = fn @"f"(i32, i32) -> i32
%0: i32 = .block (6 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: i32 = .param index=(%1)                                           ; i32{ [runtime] }
 ├ %3: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 ├ %4: i32 = .param_get operand=(%2)                                     ; i32{ [runtime] }
 ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                      ; i32{ [runtime] }
 └ %6: void = .ret maybe_operand=(%5)                                    ; void

%31 = global @"a" todo_complex(global) 
%0: i32 = .block (4 insts)
 ├ !%1: int = .constant                                                  ; int{ 1 }
 ├ !%2: typeof(i32) = .type                                              ; typeof(i32)
 ├ %3: i32 = .cast operand=(%1)                                          ; i32{ 1 }
 └ %4: void = .br target=(%0) payload=(3)                                ; void

%32 = fn @"foo_adddd"() -> i32
%0: typeof(i32) = .block (5 insts)
 ├ !%1: int = comptime .block (2 insts)
 │  ├ %2: int = .constant                                                   ; int{ 2 }
 │  └ %3: void = .br target=(%1) payload=(2)                                ; void
 ├ !%4: typeof(i32) = .type                                              ; typeof(i32)
 ├ %5: *i32 = .alloc type=(i32) mutable=(false)                          ; *i32@fff20
 ├ %6: i32 = .cast operand=(%1)                                          ; i32{ 2 }
 └ %7: void = .store operand=(%5) payload=(%6)                           ; void

%33 = fn @"woop"() -> i32
%0: i32 = .block (3 insts)
 ├ !%1: int = .constant                                                  ; int{ 2 }
 ├ %2: i32 = .cast operand=(%1)                                          ; i32{ 2 }
 └ %3: void = .ret maybe_operand=(%2)                                    ; void

%34 = fn @"throws"() -> Result(typeof(i32), unknown)
%0: typeof(Result(typeof(i32), unknown)) = .block (0 insts)

%35 = fn @"foo_add"(i32, i32) -> i32
%0: i32 = .block (6 insts)
 ├ %1: i32 = .param index=(%0)                                           ; i32{ [runtime] }
 ├ %2: i32 = .param index=(%1)                                           ; i32{ [runtime] }
 ├ %3: i32 = .param_get operand=(%1)                                     ; i32{ [runtime] }
 ├ %4: i32 = .param_get operand=(%2)                                     ; i32{ [runtime] }
 ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                      ; i32{ [runtime] }
 └ %6: void = .ret maybe_operand=(%5)                                    ; void

